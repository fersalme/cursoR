---
title: "Resumen gr치fico de datos en R"
author: "Faiber Chaparro y Fernando Salcedo, ALZAK Foundation"
date: 2023-08-19
format: 
  revealjs :
    logo: "src/alzak_foundation.png"
    footer: "Copyright (c) 2023, Fernando Salcedo"
    scrollable: true
    margin: 0
execute:
  echo: true
enbeded: true
---

## Introducci칩n 游봏

- Los gr치ficos permiten resumir datos de forma visual.
- Su objetivo siempre es representar patrones o comportamientos.

![Mapa de Charles Minard (1869) que muestra el movimiento, las p칠rdidas humanas y la temperatura ambiental durante la campa침a de Napole칩n contra Rusia en 1812.](https://upload.wikimedia.org/wikipedia/commons/2/29/Minard.png)

## Paquetes usados para gr치ficar en `R`

- Durante el material usaremos comandos de `r-base` para gr치fica r치pidamente.
- Por otra parte, `ggplot2` es el paquete de `R` m치s usado para hacer gr치ficos 

# Cargar datos

- Usaremos una base de dispensaci칩n de medicamentos.

```{r}
# Cargamos los datos de ejemplo
library(tidyverse)
df_med <- read_csv2("../datos/base_medicamentos.csv")

# Limpiar nombres
df_med <- janitor::clean_names(df_med)

# usamos datos completos
df_med <- df_med %>% 
  drop_na()

# encabezado
glimpse(df_med)

```

## Gr치ficos exploratorios con `R-base` {background-color="#b2d8d8"}

## Histograma

- Los histogramas muestran la distribuci칩n de una variable continua dividiendo sus valores en rangos y representando la frecuencia de valores que est치n en esos rangos.

```{r}
#| echo: true
#| output-location: slide
hist(df_med$precio, 
     xlab = "Precio medicamentos", 
     ylab = "Frecuencia", 
     main = "Histrograma precio")

```

## Densidad

- Un gr치fico de densidad t칠cnicamente es la estimaci칩n de la funci칩n de densidad de probabilidad de una variable aleatoria. 
- Los diagramas de densidad pueden ser una forma efectiva de ver la distribuci칩n de una variable continua. 

```{r}
#| echo: true
#| output-location: slide

plot(density(df_med$precio), #vector o variable
     xlab = "Precio medicamentos", 
     ylab = "Frecuencia", 
     main = "Histrograma precios")

```

## Caja y bigotes

- Describe una variable continua en cinco estad칤sticos de resumen : m칤nimo, primer cuartil (25%), mediana (50%), tercer cuartil (75%) y m치ximo
- Tambi칠n permite identificar valore extremos

```{r}

# una variable
boxplot(df_med$costo_total)

# una variable sin datos atipicos
boxplot(df_med$costo_total, outline = FALSE)

# dos o m치s variables categ칩ricas o factor
boxplot(costo_total ~ pbs, data = df_med, outline = FALSE)

```

## Gr치ficos de barras simple

- Gr치ficos de barras (simples y apiladas)
- Las gr치ficas de barras representan un volumen o cantidad de un atributo. 
- Por ejemplo, n칰mero de dispensaciones realizadas o promedio del costo de un medicamento por mes.
- Son el tipo de gr치fico m치s usados.

```{r}
# simple
barplot(table(df_med$pbs), 
        xlab = "PBS",
        ylab = "Frecuencia", 
        main = "Dispensaciones por plan de beneficios")

# mas de un grupo no apilado
tab <- table(df_med$tipo_entrega, df_med$pbs)
barplot(tab, 
        beside = TRUE,
        legend.text = rownames(tab),
        args.legend = list(x = "topleft"),
        xlab = "PBS",
        ylab = "Frecuencia", 
        main = "Dispensaciones por plan de beneficios")

# mas de un grupo apilado
barplot(tab,
        legend.text = rownames(tab),
        args.legend = list(x = "topleft"),
        xlab = "PBS",
        ylab = "Frecuencia", 
        main = "Dispensaciones por plan de beneficios")

# mas de un grupo apilado 100%
barplot(prop.table(tab, 2)*100,
        legend.text = rownames(tab),
        args.legend = list(x = "topleft"),
        xlab = "PBS",
        ylab = "Frecuencia", 
        main = "Dispensaciones por plan de beneficios")

```

## Gr치ficos con `ggplot2` {background-color="#b2d8d8"}

## Principio de `ggplot2`

- La filosof칤a de `ggplot2` es una agregaci칩n de capas de caracter칤sticas para crear el gr치fico

![](src/ggplot_concepto.png){width=50%}

## Esquema de c칩mo funciona `ggplot()`
  
![Kieran Healy. Data Visualization A practical introduction. 
](src/ch-03-ggplot-flow-vertical.png){width=50%}


## Gr치fico de barras `geom_col()` y `geom_bar()`

- Lo usamos para representar vol칰menes o cantidad
- Realicemos un gr치fico con `geom_bar()` siguiendo el esquema paso a paso de c칩mo funciona `ggplot()`, 

```{r}
#| echo: true
#| output-location: slide

# libreria ggplor2 hace parte de tidyverse
library(ggplot2)

ggplot(data = df_med, mapping = aes(x = pbs)) + # Paso 1 : Define tus variables (mapping)
  geom_bar() + # Paso 2 : Define el tipo de gr치fico (geom)
  labs(x = "PBS", # Paso 3 : Define etiquetas para ejes y titulos
       y = "Frecuencia",
       title = "Dispensaciones de medicamentos por plan de beneficios") +
  theme_minimal() # Paso 4 opcional : definir un tema

```

## Usando `fill` para agregar grupos en `geom_bar()`

- Usamos la opci칩n `fill` para se침alar usando colores grupos en el gr치ficos de barras.

```{r}
#| echo: true
#| output-location: slide

ggplot(df_med, aes(x = pbs, fill = tipo_entrega)) + # Usamos fill para agregar grupos
  geom_bar() +
  labs(x = "PBS",
       y = "Frecuencia",
       title = "Dispensaciones medicamentos por plan de beneficios",
       fill = "Tipo de entrega") +
  theme_bw()

```

## Usando `fill` para grupos no apilados en `geom_bar()`

- Usando la opci칩n `dodge` en `geom_bar()`

```{r}
#| echo: true
#| output-location: slide

# mas de un grupo apilado 
ggplot(data = na.omit(df_med),
       mapping = aes(x = pbs, fill = tipo_entrega)) +
  geom_bar(position = "dodge") +
  labs(x = "PBS",
       y = "Frecuencia",
       title = "Dispensaciones por plan de beneficios",
       fill = "Tipo de entrega") +
  theme_bw()

```

## Apilar los grupos al 100% con `geom_bar()`

- Para ello, usamos la opci칩n `fill` dentro de `geom_bar()`

```{r}
#| echo: true
#| output-location: slide

# mas de un grupo apilado 100%
ggplot(df_med, aes(x = pbs, fill = tipo_entrega)) +
  geom_bar(position = "fill") +
  labs(x = "PBS",
       y = "Frecuencia",
       title = "Dispensaciones por plan de beneficios", 
       fill = "Tipo de entrega") + 
  theme_bw()
 
```

## Etiquetas de datos con `geom_text()`

- `geom_text()` permite agregar etiquetas de datos a las gr치ficas

```{r}

# definir los datos y las graficar 
ggplot(data = df_med, mapping = aes(x = pbs)) +
  geom_bar() +
  # Agregar etiquetas 
  geom_text(aes(label = after_stat(count)), stat = "count", vjust = 0)  +
  labs(x = "PBS",
         y = "Frecuencia",
         title = "Dispensaciones por plan de beneficios") +
  theme_bw()

```

- Agregar etiquetas por grupos

```{r}

# mas de un grupo no apilado

ggplot(
  data = df_med,
  mapping = aes(x = pbs,
                fill = tipo_entrega)) +
  geom_bar(position = "dodge") +
  geom_text(aes(label = after_stat(count)),
            stat = "count",
            position = position_dodge(0.9),
            vjust = 0)  +
  labs(x = "PBS",
       y = "Frecuencia",
       title = "Dispensaciones por plan de beneficios",
       fill = "Tipo de entrega") +
  theme_bw()
```

- Agregar etiquetas por grupos apilados al 100%


```{r}

# mas de un grupo apilado 100%
ggplot(df_med, aes(x = pbs, fill = tipo_entrega)) +
  geom_bar(position = "fill") +
  geom_text(
    aes(
      # etiqueta de datos en formato porcentual
      label = scales::percent(after_stat(count)/sum(after_stat(count)))
      ),
    stat = "count", 
    # posici칩n de la etiqueta en el centro de cada grupo
    position = position_fill(vjust = 0.5)) +
  # etiquetas en porcentaje del eje y
  scale_y_continuous(labels = scales::percent) +
  labs(x = "PBS",
       y = "%",
       title = "Dispensaciones por plan de beneficios", 
       fill = "Tipo de entrega") + 
  theme_bw()
 
```

## Personalizar colores en `fill`

- Podemos personalizar los colores de los grupos usando `scales_fill_manula()`
- Los colores en R tienen nombres clave como `red` o `blue`
- Tambi칠n podemos usar c칩digos de colores como `#5DC3DA`

```{r}
#| echo: true
#| output-location: slide

ggplot(df_med, aes(x = pbs, fill = tipo_entrega)) +
  geom_bar(position = "fill") +
  geom_text(aes(label = scales::percent(after_stat(count)/sum(after_stat(count)))),
    stat = "count", 
    position = position_fill(vjust = 0.5)) +
  # colores de los grupos 
  scale_fill_manual(values = c("darkgreen", "#5DC3DA")) +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "PBS",
       y = "Frecuencia",
       title = "Dispensaciones por plan de beneficios", 
       fill = "Tipo de entrega") + 
  theme_bw()
 
```

## Usando `facets` para estratificar gr치ficos

- El comando `facet_wrap()` permite crear mini gr치ficos por grupos en un solo gr치fico
- El comando `facet_grid()` permite crear una matriz de gr치ficos

```{r}
#| echo: true
#| output-location: slide

ggplot(data = df_med,
       mapping = aes(x = pbs, fill = tipo_entrega)) +
  geom_bar(position = "fill") +
  geom_text(aes(label = scales::percent(after_stat(count)/sum(after_stat(count)), accuracy = 0.1)),
            stat = "count",
            position = position_fill(vjust = 0.5)) +
  scale_fill_manual(values = c("#54504F", "#5DC3DA")) +
  labs(x = "PBS",
       y = "Frecuencia",
       title = "Dispensaciones por plan de beneficios",
       fill = "Tipo de entrega") +
  theme_bw() +
  # dividir el gr치fico por grupos
  facet_wrap(~cronico)

```


## Gr치fico de linea usando `geom_line()` y `geom_point()`

- Un gr치fico de l칤nea se usa para mostrar evoluci칩n o cambio
- Vamos a crear un gr치fico de l칤neas de las dispensaciones por mes
- Usamos `geom_line()` combinado con `geom_point()` para hacer gr치ficos de l칤neas

```{r}
#| echo: true
#| output-location: slide

# creamos las variables
df_disp <- df_med %>% 
  mutate(
    fecha_entrega = dmy(fecha_entrega),
    mes_disp = floor_date(fecha_entrega, "month")
  ) %>% 
  count(mes_disp)

ggplot(df_disp, aes(x = mes_disp, y = n)) +
  geom_line(color = "tomato") +
  geom_point(color = "tomato") +
  geom_text(aes(label = n, y = n + 5), vjust = 0, nudge_y = 0.5) +
  scale_x_date(date_breaks = "months", date_labels = "%m/%Y") +
  labs(
    x = "Mes de dispensaci칩n",
    y = "Cantidad"
  ) +
  theme_bw()

```


## Gr치fico de linea usando `geom_line()`,  `geom_point()` y `facet_wrap()`

- Usando  `facet_wrap()` podemos crear mini gr치ficos de l칤neas

```{r}
#| echo: true
#| output-location: slide

# creamos las variables
df_disp <- df_med %>% 
  mutate(
    fecha_entrega = dmy(fecha_entrega),
    mes_disp = floor_date(fecha_entrega, "month")
  ) %>% 
  filter(departamento != "0") %>% 
  count(departamento, mes_disp)

ggplot(df_disp, aes(x = mes_disp, y = n)) +
  geom_line(color = "tomato") +
  geom_point(color = "tomato") +
  geom_text(aes(label = n, y = n), vjust = 0, nudge_y = 0.5) +
  scale_x_date(date_breaks = "months", date_labels = "%m/%Y") +
  labs(
    x = "Mes de dispensaci칩n",
    y = "Cantidad"
  ) +
  facet_wrap(~departamento, scales = "free_y") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90))

```

## Guardar un gr치fico

- Usamos el comando `ggsave()` para guardar un gr치fico
- O podemos usar la ventana `Plots > Export > Save imagen as`

```{r}

# mi grafico 
plot_pbs <- ggplot(df_med, aes(x = pbs, fill = tipo_entrega)) +
  geom_bar(position = "fill") +
  geom_text(
    aes(
      # etiqueta de datos en formato porcentual
      label = scales::percent(after_stat(count)/sum(after_stat(count)))
      ),
    stat = "count", 
    # posici칩n de la etiqueta en el centro de cada grupo
    position = position_fill(vjust = 0.5)) +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "PBS",
       y = "%",
       title = "Dispensaciones por plan de beneficios", 
       fill = "Tipo de entrega") + 
  theme_bw()

# guardar
ggsave(filename = "../resultados/plot_pbs.png", plot_pbs)

```


## Guardar un gr치fico usando `Plots`

![](src/rstudio-plot.png)

## Guardar un gr치fico usando `Plots`

![](src/rstudio-plot-save.png)
