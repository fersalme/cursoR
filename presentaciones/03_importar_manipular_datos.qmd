---
title: "Importar, manipular y exportar bases de datos en R"
author: "Fernando Salcedo Mej√≠a, ALZAK Foundation"
date: 2023-08-19
format: 
  revealjs :
    logo: "src/alzak_foundation.png"
    footer: "Copyright (c) 2023, Fernando Salcedo"
    scrollable: true
execute:
  echo: true
---

## Filosof√≠a `tidy` para la manipulaci√≥n de datos en `R` {background-color="#b2d8d8"}

## Introducci√≥n ü•Ω

-   Una parte fundamental en el an√°lisis de datos es la manipulaci√≥n de datos
-   **Representa una gran parte** del tiempo de cualquier proceso de an√°lisis de datos

![](src/data_science_workflow.png)

## Filosof√≠a `tidy` üîÆ {.smaller}

-   Hay tres reglas interrelacionadas que hacen que un conjunto de datos est√© ordenado:

::: incremental
-   Cada variable es una columna.
-   Cada observaci√≥n es una fila.
-   Cada valor es una celda.
:::

![](src/filosofia_tidy.png)

## El `tidyverse` para ciencia de datos con `R` ‚ú®

-   `tidyverse` es una colecci√≥n de paquetes `R` dise√±ados para la ciencia de datos.
-   Todos los paquetes comparten la misma filosof√≠a : an√°lisis gramatical de bases de datos
-   Usamos `install.packages("tidyverse")` y luego `library(tidyverse)` para usarlo.

```{r}
library(tidyverse)
```

## Importar datos a `R` {background-color="#b2d8d8"}

## El paquete `readr`

-   El paquete `readr` permite leer **archivos planos**
-   Tambi√©n ajusta el formato adecuado para cargarlo en `R`

::: callout-note
# ¬øQu√© es un archivo plano?

Es un tipo de archivo de almacenamiento de datos en **texto sin formato** usando una estructura tabular con filas y columnas. Usualmente se llaman `file.csv` o `file.txt` y son de tres tipos:

-   Valores separados por comas
-   Valores separados por punto y coma
-   Valores separados por tabuladores
:::

## Importar un archivo datos con `readr`

| Tipo de archivo                    | Comando        |
|------------------------------------|----------------|
| Valores separados por comas        | `read_csv()`   |
| Valores separados por punto y coma | `read_csv2()`  |
| Valores separados por tabuladores  | `read_delim()` |

## Base de casos COVID-19 en Bol√≠var ü¶†

```{r}
# importar un archivo delimitado por comas
df_covid <- read_csv("../datos/casos_covid-19_bolivar.csv")

# ver los datos en la consola
glimpse(df_covid)

```

## Importar datos desde Excel con `readxl` {.smaller}

-   El paquete `readxl` permite leer datos desde archivos de Excel
-   Para instalarlo usamos `install.packages("readxl)` y `library(readxl)`

| Uso                       | Comando                            |
|---------------------------|------------------------------------|
| N√∫mero de hojas y nombres | `excel_sheets(path = "file.xlsx")` |
| Leer datos de una hoja    | `read_excel(path = "file.xlsx", sheet = "hoja1")` |

::: callout-note
Si el archivo de Excel solo contiene una sola hoja con datos, no es necesario usar la opci√≥n `sheet`
:::

## Base de casos COVID-19 en Bol√≠var desde Excel üìÑ

```{r}
# cargar la libreria
library(readxl)

# nombres hojas
excel_sheets(path = "../datos/casos_covid-19_bolivar.xlsx")

# importar los datos
df_covid <- read_excel(path = "../datos/casos_covid-19_bolivar.xlsx", # archivo de Excel
                       sheet = "Sheet1" ) # hoja con los datos

# ver los datos en la consola
glimpse(df_covid)

```

## El paquete utilitario `janitor` üßπ

- `janitor` es un paquete utilitario que tienen comandos para rutinas que hacemos regularmente 
- La m√°s empleada es crear nombres de variables consistentes con la filosof√≠a `tidy` con el comando `clean_names()`
- Para instalarlo `install.packages("janitor")`

```{r}
# cargamos la libreria
library(janitor)

# nombres de la variables
names(df_covid)

# limpiamos los nombres de la base covid
df_covid <- clean_names(df_covid)
names(df_covid)
```


## Resumen y transformaci√≥n de datos con `dplyr` {background-color="#b2d8d8"}

## El paquete `dplyr` : la herramienta principal üõ†

- El paquete `dplyr` permite manipular de forma **gramatical o con verbos** una base de datos
- Los verbos de `dplyr` se pueden encadenar a trav√©s de un pipe `%>%` incrementando la versatilidad y rapidez
- Los verbos m√°s comunes a usar son :




  - `mutate()` : agrega nuevas variables o modifican las existentes a partir de funciones
  - `select()` : selecciona variables a partir de su nombre
  - `filter()` : segmenta las filas que cumplen condiciones
  - `summarise()` : resumen variables en valores √∫nicos
  - `arrange()` : cambia el orden de las filas
  - `group_by()` : permite hacer operaciones por grupos
- El paquete `tidyr` brinda comandos √∫tiles que permiten transformar las bases de datos (transponer, separa, etc)
- Los verbos m√°s usados son :
  - `pivot_wider()` : transforma una base de formato largo a formato ancho
  - `pivot_longer()` : transforma una base de formato ancho a largo
  - `separate()` : separa en dos columnas valores de texto por un separador
- Normalmente ambos se usan en conjunto `dplyr` + `tidyr` = `r ji("love")`


