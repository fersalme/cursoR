---
title: "Importar, manipular y exportar bases de datos en R"
author: "Fernando Salcedo Mej√≠a, ALZAK Foundation"
date: 2023-08-19
format: 
  revealjs :
    logo: "src/alzak_foundation.png"
    footer: "Copyright (c) 2023, Fernando Salcedo"
    scrollable: true
execute:
  echo: true
---

## Filosof√≠a `tidy` para la manipulaci√≥n de datos en `R` {background-color="#b2d8d8"}

## Introducci√≥n ü•Ω

-   Una parte fundamental en el an√°lisis de datos es la manipulaci√≥n de datos
-   **Representa una gran parte** del tiempo de cualquier proceso de an√°lisis de datos

![](src/data_science_workflow.png)

## Filosof√≠a `tidy` üîÆ {.smaller}

-   Hay tres reglas interrelacionadas que hacen que un conjunto de datos est√© ordenado:

::: incremental
-   Cada variable es una columna.
-   Cada observaci√≥n es una fila.
-   Cada valor es una celda.
:::

![](src/filosofia_tidy.png)

## El `tidyverse` para ciencia de datos con `R` ‚ú®

-   `tidyverse` es una colecci√≥n de paquetes `R` dise√±ados para la ciencia de datos.
-   Todos los paquetes comparten la misma filosof√≠a : an√°lisis gramatical de bases de datos
-   Usamos `install.packages("tidyverse")` y luego `library(tidyverse)` para usarlo.

```{r}
library(tidyverse)
tidyverse_sitrep()
```

## Importar datos a `R` {background-color="#b2d8d8"}

## El paquete `readr`

-   El paquete `readr` permite leer **archivos planos**
-   Tambi√©n ajusta el formato adecuado para cargarlo en `R`

::: callout-note
# ¬øQu√© es un archivo plano?

Es un tipo de archivo de almacenamiento de datos en **texto sin formato** usando una estructura tabular con filas y columnas. Usualmente se llaman `file.csv` o `file.txt` y son de tres tipos:

-   Valores separados por comas
-   Valores separados por punto y coma
-   Valores separados por tabuladores
:::

## Importar un archivo datos con `readr`

| Tipo de archivo                    | Comando        |
|------------------------------------|----------------|
| Valores separados por comas        | `read_csv()`   |
| Valores separados por punto y coma | `read_csv2()`  |
| Valores separados por tabuladores  | `read_delim()` |

## Base de casos COVID-19 en Bol√≠var ü¶†

```{r, echo=FALSE}
options(width = 70)
```

```{r}
# importar un archivo delimitado por comas
df_covid <- read_csv("../datos/casos_covid-19_bolivar.csv")

# ver los datos en la consola
glimpse(df_covid)

```

## Importar datos desde Excel con `readxl` {.smaller}

-   El paquete `readxl` permite leer datos desde archivos de Excel
-   Para instalarlo usamos `install.packages("readxl)` y `library(readxl)`

| Uso                       | Comando                            |
|---------------------------|------------------------------------|
| N√∫mero de hojas y nombres | `excel_sheets(path = "file.xlsx")` |
| Leer datos de una hoja    | `read_excel(path = "file.xlsx", sheet = "hoja1")` |

::: callout-note
Si el archivo de Excel solo contiene una sola hoja con datos, no es necesario usar la opci√≥n `sheet`
:::

## Base de casos COVID-19 en Bol√≠var desde Excel üìÑ

```{r}
# cargar la libreria
library(readxl)

# nombres hojas
excel_sheets(path = "../datos/casos_covid-19_bolivar.xlsx")

# importar los datos
df_covid <- read_excel(path = "../datos/casos_covid-19_bolivar.xlsx", # archivo de Excel
                       sheet = "Sheet1" ) # hoja con los datos

# ver los datos en la consola
glimpse(df_covid)

```

## El paquete utilitario `janitor` üßπ

- `janitor` es un paquete utilitario de limpieza de datos. 
- El comando `clean_names()` nos sirve para limpiar nombres en bases de datos.

```{r}
# instalar 
# install.packages("janitor")

# cargamos la libreria
library(janitor)

# nombres de la variables
names(df_covid)

# limpiamos los nombres de la base covid
df_covid <- clean_names(df_covid)
names(df_covid)
```


## Resumen y transformaci√≥n de datos con `dplyr` {background-color="#b2d8d8"}

## El paquete `dplyr` : la herramienta principal üõ†

- El paquete `dplyr` permite manipular de forma **gramatical o con verbos** una base de datos
- Los verbos de `dplyr` se encadenan a trav√©s de un pipe `comando_1() %>% comando_2()`

| Descripci√≥n | Comando |
| --- | --- |
| Selecciona variables a partir de su nombre | `select()`|
| Filtrar filas seg√∫n condici√≥n | `filter()` |
| Agrega nuevas variables o modifican las existentes | `mutate()` |
| Resumen variables | `summarise()` |
| Hacer operaciones por grupos | `group_by()`|
| Ordenar por variables | `arrange()`


## `dplyr` : Selecci√≥n de variables

- Para seleccionar variables usamos `select()`

```{r}
# seleccionamos sexo y edad de la base
df_covid_1 <- df_covid %>% 
  select(edad, sexo)

# ver los datos
glimpse(df_covid_1)

```

## `dplyr` : Selecci√≥n de variables usando ayudantes

- `starts_with()` : Variable que comienzan con un prefijo
- `ends_with()` : Termina con un sufijo
- `contains()` : Contiene una cadena de texto
- `where()` : Seleccionar variables que son de cierto formato

```{r}

# seleccionar las variables de fecha
df_covid_fechas <- df_covid %>% 
  select(starts_with("fecha"))

glimpse(df_covid_fechas)

# seleccionar variables de n√∫mero
df_covid_num <- df_covid %>% 
  select(where(is.numeric))

glimpse(df_covid_num)

```

## `dplyr` : Filtrar valores

- Para filtrar filas o observaciones usamos `filter()` 
- Debemos usar operadores l√≥gicos `==, >, <, >=, <=, &, |, %in%` para filtrar las filas.

```{r}
# filtrar los casos de Cartagena y sexo masculino
df_covid_ctg_M <- df_covid %>% 
  filter(codigo_divipola_municipio == 13001, sexo == "M")

glimpse(df_covid_ctg_M)

# filtrar ciertos municipios
df_covid_mun <- df_covid %>% 
  filter(
    nombre_municipio %in% c("CARTAGENA", "TURBACO", "ARJONA")
  )

glimpse(df_covid_mun)

```

## `dplyr` : Resumen de variables

- Resumiendo casos con `summarise()` y `count()`

```{r}

# Numero de casos de COVID
df_covid %>% 
  count()

# Numero de casos de COVID
df_covid %>% 
  summarise(casos = n())

# Numero de casos de COVID por municipio?
df_covid %>% 
  count(by = nombre_municipio)

# Numero de casos de COVID por departamento?
df_covid %>% 
  group_by(nombre_municipio) %>% 
  summarise(caso = n())

```

## `dplyr` : Crear y transformar variables

- Usamos el comando `mutate()` para crear y transformar variables 

```{r}

# cambiar texto a mayusculas
df_covid <- df_covid %>% 
  mutate(
    recuperado = str_to_upper(recuperado)
  )

glimpse(df_covid)

# convertir variable fecha_reporte_web a fecha
df_covid <- df_covid %>% 
  mutate(
    # eliminar la parte del tiempo
    fecha_reporte_web = str_remove(fecha_reporte_web, pattern = " 0:00:00"),
    # pasar a fecha usando el formato dd/mm/YYYY
    fecha_reporte_web = dmy(fecha_reporte_web)
  )

glimpse(df_covid)

```

## `dplyr` : Transformar o crear variables seg√∫n condiciones 

- `case_when()` permite evaluar m√∫ltiples condiciones y asignar el valor correspondiente dentro de `mutate()`

```{r}

# Creamos la variable de edad en a√±os
df_covid <- df_covid %>% 
  mutate(
    edad_years = case_when(
      unidad_de_medida_de_edad == 3 ~ edad/365.25, # primera condici√≥n
      unidad_de_medida_de_edad == 2 ~ edad/12, # segunda condici√≥n
      TRUE ~ edad # cuando no cumplen las condiciones anteriores
    )
  )

# vemos la estructura de los datos con glimpse
glimpse(df_covid)

```


## `dplyr` : Transformar o crear variables al tiempo

- `across()` : nos permite manipular varias variables a la vez.
- **Importante!** se usa dentro de `mutate()` y `summarise()`
- Con `across()` podemos usar comando de selecci√≥n como `star_with()` o `where()`

```{r}

# Estandarizamos las variables de texto a mayusculas
df_covid <- df_covid %>% 
  mutate(
    across(where(is.character), str_to_upper)
  )

glimpse(df_covid)


# Estandarizamos las variables de fecha y texto
df_covid <- df_covid %>% 
  mutate(
    across(
      # variables a aplicar una funci√≥n
      starts_with("fecha") & where(is.character), 
      # funci√≥n a aplicar
       ~dmy(str_remove(.x, " 0:00:00"))
    )
  )

glimpse(df_covid)

```

## Conectando todos los verbos de `dplyr`

- Podemos encadenar multiples verbos en una sola orden usando `%>%`

```{r}

# distribuci√≥n de casos por municipios
df_covid %>% # base de datos
  count(by = nombre_municipio) %>% # contar por grupos
  mutate(prop = n*100/sum(n)) %>%  # calcular la proporcion respecto al total
  arrange(-prop) # ordenar de mayor a menor

# resumen de edad por sexo con casos, promedio, minimo, maximo
df_covid %>% 
  group_by(sexo) %>% 
  summarise(
    casos = n(),
    promedio = mean(edad_years, na.rm = TRUE),
    desv = sd(edad_years, na.rm = TRUE),
    min = min(edad_years, na.rm = TRUE),
    max = max(edad_years, na.rm = TRUE)
  )

```


## `dplyr` : Cruzar base de datos

- `dplyr` cuenta con verbos para cruzar bases de datos
- Supongamos que tenemos una base de datos `df_x` y una `df_y` que tienen un identificador en com√∫n: `id`

```{r}

# base df_x
df_x <- data.frame(
  id =  c(1, 2, 3),
  valor_x = c(12, 34, 45)
)

df_x

# base df_y
df_y <- data.frame(
  id = c(1, 2, 4),
  valor_y = c("A", "B", "C")
)

df_y

```

## `dplyr` : distintos cruces de base de datos

- `inner_join()` : Adicionar y retiene los indicadores que coinciden entre las bases `df_x`, `df_y`

```{r}
inner_join(df_x, df_y)
```

- `left_join()` : Adicionar a la base `df_x` las variables de `df_y` de los indicadores que coinciden

```{r}
left_join(df_x, df_y)
```

- `full_join()` : Adicionar y retiene los indicadores que coinciden y los que no entre las bases `df_x`, `df_y`

```{r}
full_join(df_x, df_y)
```

## `dplyr` : Uso de `left_join()` en la base de ejemplo

```{r}
# casos por municipios
df_casos_mun <- df_covid %>% 
  count(codigo_divipola_municipio, nombre_municipio, name = "casos") 

# muertes por municipios
df_muertes_mun <- df_covid %>% 
  filter(recuperado == "FALLECIDO") %>% 
  count(codigo_divipola_municipio, name = "muertes")

# agregar a la base de casos las muertes
df_casos_muertes_mun <- df_casos_mun %>% 
  left_join(
    df_muertes_mun
  ) %>% 
  arrange(-casos)
  
# vemos la base de datos
df_casos_muertes_mun

```

## `tidyr` : Organizaci√≥n de datos üìè 

- Brinda comandos √∫tiles que permiten transformar las bases de datos (transponer, separa, etc)
- Los verbos m√°s usados son :
  - `pivot_wider()` : transforma una base de formato largo a formato ancho
  - `pivot_longer()` : transforma una base de formato ancho a largo
  - `separate()` : separa en dos columnas valores de texto por un separador

## Usando `pivot_wider()` en la base COVID-19

```{r}

# casos por a√±o, mes y municipios
df_covid_year_mes <- df_covid %>% 
  mutate(
    year = year(fecha_de_notificacion),
    mes = month(fecha_de_notificacion)
  ) %>% 
  select(id_de_caso, nombre_municipio, year, mes)

# resumimos los datos
df_casos_mes <- df_covid_year_mes %>%  
  count(nombre_municipio, year, mes, name = "casos")

# vemos los datos 
df_casos_mes

# pasar los a√±os de las filas a variable
df_casos_mes_wide <- df_casos_mes %>% 
  arrange(nombre_municipio, mes) %>% # ordenar los datos por mes
  pivot_wider(names_from = mes, # valores que ser√°n columnas
              values_from = casos, # valores a trasponer
              names_prefix = "mes_", # prefijo de los nombres 
              values_fill = 0) # si no hay valores coloca un 0

# vemos los datos
df_casos_mes_wide
```

## Usando `pivot_longer()` en la base COVID-19

```{r}

# definimos las colunmnas a pasar a formato largo y valores 
df_casos_mes_long <- df_casos_mes_wide %>% 
  pivot_longer(cols = mes_1:mes_12, # variables a transponer
               names_to = "mes", # nueva variable
               values_to = "casos") # valores

# vemos los datos
df_casos_mes_long

```

## Guardar y exportar una base de datos {background-color="#b2d8d8"}

## Exportar a archivo plano

- Si queremos que el archivo se pueda leer desde cualquier programa usamos `write_csv()`
  - **Ventajas** : Se puede usar en otros programas
  - **Desventajas** : El archivo es m√°s pesado y perdemos los formatos de los datos como las fechas

```{r, eval=FALSE}
# guardar los datos
write_csv(df_casos_muertes_mun, file = "../datos/casos_muertes_bolivar.csv")
```

## Exportar a Excel

- Para exportar usamos el paquete `writexl`
- Su funci√≥n principal es `write_xlsx()` que permite exportar bases de datos a archivos de Excel.

::: callout-warning
 # Importate
 Tenga en cuenta Excel no puede guardar m√°s de 1 mill√≥n de filas por hoja
:::

```{r, eval=FALSE}
# guardar una base
library(writexl)

# guardar una base
write_xlsx(df_casos_muertes_mun, path = "../datos/casos_muertes_bolivar.xlsx")

# guardar m√∫ltiples hojas
list_hojas <- list(
  casos_mes =  df_casos_mes_wide,
  resumen_casos_muertes = df_casos_muertes_mun
)

# guardar todo
write_xlsx(list_hojas, path = "../datos/covid_bolivar.xlsx")

```

::: {.callout-tip}
## Separar por grupos una base

Usando el comando `split()` puedes crear una lista de bases de datos por grupos. Es √∫til para exportar datos a Excel donde cada base sea una hoja por separado.
:::

# Guardar en formato `R`

- Para guardar cualquier objeto en formato `R` usamos `saveRDS()`
- Tambi√©n podemos guardar multiplex objetos usando `save()`
- **Ventajas** : El archivo conserva el formato de `R`, es m√°s liviano y m√°s r√°pido leerlo
- **Desventajas** : Es exclusivo de `R`

```{r}
# guardar en formato Rds
saveRDS(df_covid, file = "../datos/base_covid_bolivar.rds")

# guardar en RData
save(df_casos_mes_wide, df_casos_muertes_mun, 
     file = "../datos/bases_covid_bolivar.RData")

```


## Prueba lo que has aprendido 1. üß†

- Importa la base `base_medicamentos.csv` a `R`
- Limpia los nombres usando `janitor`
- Ajusta el formato de la variable `fecha_entrega`
- Crea una variable para el mes y otra para el a√±o en usando la `fecha_entrega`
- Calcula el n√∫mero total de dispensaciones de medicamentos por `departamento`, `municipio`, `mes` y `a√±o` solo para la `familia` de medicamentos cardiovascular.
- Transponer los datos colocando los meses en las columnas y las filas los departamentos, municipios y a√±os.
- Exporta a un archivo plano delimitado por comas el resultado anterior. Use el nombre `dispensacion_cardiovascular.csv`.
- Exportar a Excel el los mismos datos, pero cada a√±o debe estar en una sola hoja. Use el nombre `dispensacion_cardiovascular.xlsx`.

## Prueba lo que has aprendido 2. üß†

- Usando los reportes de proyecci√≥n de poblaci√≥n del DANE entre 1985 a 2035 que est√° en formato `.xlsx` realice :
- Importa las distintas bases de datos de poblaci√≥n a `R`
- Limpia los nombres usando `janitor`
- Cree una base de datos √∫nica formato `tidy` a lo largo donde solo est√©n las variables : `codigo_dpto, nombre_dpto, codigo_muncipio, nombre_municipio, a√±o, edad, sexo, poblacion`
- Exporta a un archivo plano delimitado por comas el resultado anterior. Use el nombre `proyeccion_poblacion_1985_2035.csv`.
